# Manacher's algorithm for longest palindromic substring in O(n)
# Compared to O(n^2) method

import time

def timing(func):
    def wrapper(*arg, **kw):
        start = time.time()
        ans = func(*arg, **kw)
        stop = time.time()
        print('Time taken: {:0.3f} s'.format(stop - start))
        return ans
    return wrapper

@timing
def palin(mystr):
  if not mystr:
    return mystr

  palindromes = []

  for i in range(len(mystr)):

    for j in range(i, len(mystr)):
      substr = mystr[i:j+1]

      if substr == substr[::-1]:
        palindromes.append(substr)   

  return max(palindromes, key=len) if palindromes else mystr[0]



@timing
def manachers(mystr):
    T = [0] * (2 * (len(mystr)) + 3)

    # Fill odd indices with sentinel chars evens with real chars
    sen_char = "@"
    start_sen = "!"
    end_sen = "#"
    for i in range(len(T)):
        if i == 0:
            T[i] = start_sen
        elif i % 2 == 0 and i < len(T) - 1:
            mystr_index = (i - 1) // 2
            T[i] = mystr[mystr_index]
        elif i % 2 == 1 and i < len(T) - 1:
            T[i] = sen_char
        else:
            T[i] = end_sen

    # Also track the expand length around all indices
    P = [0] * len(T)

    # Track center of largest palin yet and its right boundary
    center = right = 0

    # Track largest expansion length and it index
    max_len = index = 0

    # Loop through word array to update expand length around each index
    for i in range(1, len(T) - 1):

        # Check to see if new palin
        # around i lies within a bigger one
        # If so, copy expand length of its mirror
        mirror = 2 * center - i
        if i < right:
            P[i] = min(right - i, P[mirror])

        # Expand around new center
        # Update expand length at i as needed
        while T[i + P[i] + 1] == T[i - (P[i] + 1)]:
            P[i] += 1

        # If we breached previous right boundary
        # Make i the new center of the longest palin
        # and update right boundary
        if i + P[i] > right:
            right = i + P[i]
            center = i

        # Update max_len
        if P[i] > max_len:
            max_len = P[i]
            index = i

    t_arr = T[ index - max_len: index + max_len + 1 ]
    word_arr = [ c for c in t_arr if c != sen_char and c != start_sen and c != end_sen ]
    word = "".join(word_arr)

    return word



# driver code

mystr = '''111112444242423523523590735203560235620356203562035235346342352623622221111
12444242423523523590735203560235620356203562035235346342352623622221111124442424235235
235907352035602356203562035620352353463423526236222211111244424242352352359073520356023
562035620356203523534634235262362222111112444242423523523590735203560235620356203562035
2353463423526236222211111244424242352352359073520356023562035620356203523534634235262362222111112444242423523523590735203560235620356203562035235346342352623622221111
12444242423523523590735203560235620356203562035235346342352623622221111124442424235235
235907352035602356203562035620352353463423526236222211111244424242352352359073520356023
562035620356203523534634235262362222111112444242423523523590735203560235620356203562035
2353463423526236222211111244424242352352359073520356023562035620356203523534634235262362222111112444242423523523590735203560235620356203562035235346342352623622221111
12444242423523523590735203560235620356203562035235346342352623622221111124442424235235
235907352035602356203562035620352353463423526236222211111244424242352352359073520356023
56203562035620352353463423111112444242423523523590735203560235620356203562035235346342352623622221111
12444242423523523590735203560235620356203562035235346342352623622221111124442424235235
235907352035602356203562035620352353463423526236222211111244424242352352359073520356023
562035620356203523534634235262362222111112444242423523523590735203560235620356203562035
2353463423526236222211111244424242352352359073520356023562035620356203523534634235262362222111112444242423523523590735203560235620356203562035235346342352623622221111
12444242423523523590735203560235620356203562035235346342352623622221111124442424235235
2359073520334235262362222111112444242423523523590735203560235620356203562035235346342352623622221111
12444242423523523590735203560235620356203562035235346342352623622221111124442424235235
235907352035602356203562035620352353463423526236222211111244424242352352359073520356023
562035620356203523534634235262362222111112444242423523523590735203560235620356203562035
2353463423526236222211111244424242352352359073520356023562035620356203523534634235262362222111112444242423523523590735203560235620356203562035235346342352623622221111
12444242423523523590735203560235620356203562035235346342352623622221111124442424235235
235907352035602356203562035620352353463423526236222211111244424242352352359073520356023
562035620356203523534634235262362222111112444242423523523590735203560235620356203562035
2353463423526236222211111244424242352352359073520356023562035620356203523534634235262362222'''

print(manachers(mystr))
print(palin(mystr))